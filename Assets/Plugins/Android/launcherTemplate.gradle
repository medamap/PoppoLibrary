apply plugin: 'com.android.application'
apply from: 'setupSymbols.gradle'
apply from: '../shared/keepUnitySymbols.gradle'

dependencies {
    implementation project(':unityLibrary')
    implementation 'com.google.android.material:material:1.8.0'
}

android {
    namespace "**NAMESPACE**"
    ndkPath "**NDKPATH**"
    ndkVersion "**NDKVERSION**"

    compileSdk 34
    buildToolsVersion = "**BUILDTOOLS**"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        minSdk **MINSDK**
        targetSdk **TARGETSDK**
        applicationId '**APPLICATIONID**'
        ndk {
            abiFilters **ABIFILTERS**
            debugSymbolLevel **DEBUGSYMBOLLEVEL**
        }
        versionCode **VERSIONCODE**
        versionName '**VERSIONNAME**'
    }

    androidResources {
        noCompress = **BUILTIN_NOCOMPRESS** + unityStreamingAssets.tokenize(', ')
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~"
    }**SIGN**

    lint {
        abortOnError false
    }

    buildTypes {
        debug {
            minifyEnabled **MINIFY_DEBUG**
            proguardFiles getDefaultProguardFile('proguard-android.txt')**SIGNCONFIG**
            jniDebuggable true
        }
        release {
            minifyEnabled **MINIFY_RELEASE**
            proguardFiles getDefaultProguardFile('proguard-android.txt')**SIGNCONFIG**
        }
    }**PACKAGING****PLAY_ASSET_PACKS****SPLITS**
**BUILT_APK_LOCATION**
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = true
        }
        texture {
            enableSplit = true
        }
    }

    afterEvaluate {
        tasks.matching { task ->
            task.name.startsWith("process") && task.name.endsWith("Manifest")
        }.all { manifestTask ->
            manifestTask.doLast {
                // マージ済み Manifest のパスは Unity のバージョンやビルド構成によって異なる場合があるので、必要に応じてパスを確認してください
                def manifestFile = file("$buildDir/intermediates/merged_manifests/release/AndroidManifest.xml")
                if (manifestFile.exists()) {
                    def manifestText = manifestFile.text
                    def permissions = [
                        '<uses-permission android:name="android.permission.INTERNET" />',
                        '<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />',
                        '<uses-permission android:name="android.permission.CHANGE_WIFI_MULTICAST_STATE" />',
                        '<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />'
                    ]
                    permissions.each { permission ->
                        if (!manifestText.contains(permission)) {
                            manifestText = manifestText.replaceFirst('<manifest', '<manifest\n    ' + permission)
                        }
                    }
                    manifestFile.write(manifestText)
                    println(">> Custom permissions injected into AndroidManifest.xml")
                } else {
                    println(">> Merged AndroidManifest.xml not found")
                }
            }
        }
    }

	**GOOGLE_PLAY_DEPENDENCIES**
}**SPLITS_VERSION_CODE****LAUNCHER_SOURCE_BUILD_SETUP**
